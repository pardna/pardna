(function() {
angular.module('Pardna', ['app-parameters', 'ui.router', 'ngMaterial', 'ngMessages', 'LocalStorageModule', 'angular-jwt', 'angular-loading-bar']);

angular.module('Pardna').config(function (localStorageServiceProvider) {
  // localStorageServiceProvider.setStorageType('sessionStorage');
});



angular.module('Pardna').run(function($rootScope, $state, localStorageService, jwtHelper, userService) {
  $rootScope.$on('$stateChangeStart', function(e, to) {
    if (typeof to.requiresLogin !== "undefined" && to.requiresLogin === true) {
      console.log("requires login");
      console.log(userService.getToken());
      if (!userService.getToken() || jwtHelper.isTokenExpired(userService.getToken())) {
        e.preventDefault();
        $state.go('login');
      }
    }
  });
});

angular.module('Pardna').config(function Config($httpProvider, jwtInterceptorProvider) {
  jwtInterceptorProvider.authHeader = "X-Access-Token";
  jwtInterceptorProvider.authPrefix = "Bearer";
  // Please note we're annotating the function so that the $injector works when the file is minified
  jwtInterceptorProvider.tokenGetter = ['localStorageService', 'userService', function(localStorageService, userService) {
    // myService.doSomething();
    return userService.getToken();
  }];


  $httpProvider.interceptors.push('jwtInterceptor');
});

}.call(this));

angular.module('app-parameters',[])
  .constant('env', {"apiUrl":"http://192.168.56.101:444/api/web/index.php/api/v1"});

'use strict';

/**
 * Route configuration for the Dashboard module.
 *
 */

angular.module('Pardna').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/');

        // Application routes

        $stateProvider
            .state('home', {
                url: '/',

                // templateUrl: 'module/pardna/app/templates/home.html',
                views: {
                  '': {
                    controller: 'HomeCtrl',
                    'templateUrl' : 'module/pardna/app/templates/home.html',
                  },
                  'nav@home': {
                    'templateUrl' : 'module/pardna/app/templates/home-nav.html'
                  },
                  'confirmation@home': {
                    'templateUrl' : 'module/pardna/app/templates/home-confirmation.html'
                  }
                },
                requiresLogin: true
            })
            .state('group-add', {
                data: {
                  'selectedTab': 0
                },
                url: '/group/add',
                views: {
                  '': {
                    data: {
                      'selectedTab': 0
                    },
                    controller: 'GroupAddCtrl',
                    'templateUrl' : 'module/pardna/group/templates/add-group.html',
                  },
                  'nav@group-add': {
                    'templateUrl' : 'module/pardna/app/templates/home-nav.html'
                  },
                  'your-details@group-add': {
                    'templateUrl' : 'module/pardna/group/templates/your-details.html'
                  },
                  'pardna-details@group-add': {
                    'templateUrl' : 'module/pardna/group/templates/pardna-details.html'
                  },
                  'direct-debit@group-add': {
                    'templateUrl' : 'module/pardna/group/templates/direct-debit.html'
                  },
                  'add-users@group-add': {
                    'templateUrl' : 'module/pardna/group/templates/add-users.html'
                  }
                },
                requiresLogin: true
            })
            .state('user-add', {
                url: '/user/add',
                controller: 'UserCtrl',
                templateUrl: 'module/pardna/user/templates/add.html'
            })
            .state('signup', {
                url: '/signup',
                controller: 'SignupCtrl',
                templateUrl: 'module/pardna/user/templates/signup.html'
            })
            .state('forgot-password', {
                url: '/forgot-password',
                controller: 'ForgotPasswordCtrl',
                templateUrl: 'module/pardna/user/templates/forgot-password.html'
            })
            .state('login', {
                url: '/login',
                controller: 'LoginCtrl',
                templateUrl: 'module/pardna/user/templates/login.html'
            })
            .state('logout', {
                url: '/logout',
                controller: 'LogoutCtrl',
                resolve: {
                  init: function(userService) {
                    return userService.deleteToken();;
                  }
                }
            })
            .state('geomodel-weight', {
                url: '/geomodel/weight/:id',
                controller: 'GeoModelWeightCtrl',
                templateUrl: 'module/mrt/geomodel/templates/weight-index.html'
            }).state('geomodel', {
                url: '/geomodel',
                controller: 'GeoModelCtrl',
                templateUrl: 'module/mrt/geomodel/templates/index.html'
            })
            .state('geography', {
                url: '/geography',
                controller: 'GeographyCtrl',
                templateUrl: 'module/mrt/geography/templates/index.html'
            })
            .state('geogroup', {
                url: '/geogroup',
                controller: 'GeoGroupCtrl',
                templateUrl: 'module/mrt/geogroup/templates/index.html'
            })
            .state('geogroup-view', {
                url: '/geogroup-view/:id',
                controller: 'GeoGroupViewCtrl',
                templateUrl: 'module/mrt/geogroup/templates/view.html'
            })
            .state('geoindicatorgroup', {
                url: '/geoindicatorgroup',
                controller: 'GeoIndicatorGroupCtrl',
                templateUrl: 'module/mrt/geoindicatorgroup/templates/index.html'
            })
            .state('geoindicatorgroup-view', {
                url: '/geoindicatorgroup-view/:id',
                controller: 'GeoIndicatorGroupViewCtrl',
                templateUrl: 'module/mrt/geoindicatorgroup/templates/view.html'
            })
            .state('geoindicator', {
                url: '/geoindicator',
                controller: 'GeoIndicatorCtrl',
                templateUrl: 'module/mrt/geoindicator/templates/index.html',

            })
            .state('geoindicator-view', {
                url: '/geoindicator/view/:id',
                controller: 'GeoIndicatorViewCtrl',
                templateUrl: 'module/mrt/geoindicator/templates/view.html'
            })
            .state('geoindicator-add', {
                url: '/geoindicator/add',
                controller: 'GeoIndicatorAddCtrl',
                templateUrl: 'module/mrt/geoindicator/templates/add.html'
            })
            .state('geoindicator-edit', {
                url: '/geoindicator/edit/:id',
                controller: 'GeoIndicatorAddCtrl',
                templateUrl: 'module/mrt/geoindicator/templates/add.html'
            })
            .state('geomodel-cluster', {
                url: '/geomodel/cluster',
                controller: 'GeoModelCtrl',
                templateUrl: 'module/mrt/geomodel/templates/geomodel-cluster-index.html'
            })
            .state('view-fund', {
                url: '/view-fund/:phoneId',
                controller: 'ViewFundCtrl',
                templateUrl: 'tpls/mrt/tpls/tpls/view-fund.html'
            })
            .state('tables', {
                url: '/tables',
                templateUrl: 'tables.html'
            });
    }]);

angular.module('Pardna')
.controller('HomeCtrl', ['$scope', '$window', '$mdToast', '$mdDialog', 'jwtHelper', 'localStorageService', 'userService', HomeCtrl]);

function HomeCtrl($scope, $window, $mdToast, $mdDialog, jwtHelper, localStorageService, userService) {

  $scope.user = userService.user;
  console.log($scope.user);
  /**
  $mdToast.show(
    $mdToast.simple()
    .content('Welcome back!')
    .position("top right")
    .hideDelay(3000)
  );**/

  if(typeof $scope.user.login_count !== "undefined" && $scope.user.login_count === 0) {

  }


  // Add new pardna
  $scope.data = {
    selectedIndex: 0,
    secondLocked:  true,
    secondLabel:   "Item Two",
    bottom:        false
  };
  $scope.next = function() {
    $scope.data.selectedIndex = Math.min($scope.data.selectedIndex + 1, 2) ;
  };
  $scope.previous = function() {
    $scope.data.selectedIndex = Math.max($scope.data.selectedIndex - 1, 0);
  };

  $scope.color = {
    red: Math.floor(Math.random() * 255),
    green: Math.floor(Math.random() * 255),
    blue: Math.floor(Math.random() * 255)
  };
  $scope.rating1 = 3;
  $scope.rating2 = 2;
  $scope.rating3 = 4;
  $scope.disabled1 = 0;
  $scope.disabled2 = 70;

  $scope.sendCode = function(ev) {
    $mdDialog.show({
      controller: SendCodeDialogCtrl,
      templateUrl: 'send-code.tmpl.html',
      parent: angular.element(angular.element(document.querySelector('#popupContainer'))),
      targetEvent: ev,
      clickOutsideToClose:true
    })
    .then(function(answer) {
      $scope.status = 'You said the information was "' + answer + '".';
    }, function() {
      $scope.status = 'You cancelled the dialog.';
    });
  };

  $scope.verifyCode = function(ev) {
    $mdDialog.show({
      controller: SendCodeDialogCtrl,
      templateUrl: 'verify-code.tmpl.html',
      parent: angular.element(angular.element(document.querySelector('#popupContainer'))),
      targetEvent: ev,
      clickOutsideToClose:true
    })
    .then(function(answer) {
      $scope.status = 'You said the information was "' + answer + '".';
      $scope.user = userService.user;
    }, function() {
      $scope.status = 'You cancelled the dialog.';
      $scope.user = userService.user;
    });
  };

  $scope.firstLogin = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app

    var confirm = $mdDialog.confirm()
          .title('Welcome to Parda.com!')
          .content('<p>This is you Pardna Dashboard, where you will see an overview of your account</p><p>We sent and activation link to your email address. Please click the link to enable features</p><p>Please alson complete your personal details so you can setup your Pardna group, invite others and begin saving together</p>')
          .ariaLabel('Welcome to Parda.com!')
          .targetEvent(ev)
          .ok('Please do it!')
          .cancel('OK');
    $mdDialog.show(confirm).then(function() {
      $scope.status = 'ok';
    }, function() {
      $scope.status = 'cancel';
    });
  };

  var alert;
    $scope.showAlert = showAlert;
  function showAlert() {
      alert = $mdDialog.alert({
        title: 'Attention',
        content: 'This is an example of how easy dialogs can be!',
        ok: 'Close'
      });
      $mdDialog
        .show( alert )
        .finally(function() {
          alert = undefined;
        });
    }

  // $scope.firstLogin();

  // $scope.showAlert();



  $scope.view = {};
  $scope.view.tabs = [
    {
      "icon_class": "fa fa-user",
      "label": "Your Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-gbp",
      "label": "Pardna Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-lock",
      "label": "Direct Debit",
      "template": ""
    },
    {
      "icon_class": "fa fa-users",
      "label": "Invite Friends",
      "template": ""
    },
  ]

}

angular
  .module('Pardna')
  .controller('MasterCtrl', function($scope) {

  })
  .config( function($mdThemingProvider){

  });

//

angular.module('Pardna')
.controller('SendCodeDialogCtrl', ['$scope', '$window', '$mdToast', '$mdDialog', 'jwtHelper', 'localStorageService', 'userService', SendCodeDialogCtrl]);


function SendCodeDialogCtrl($scope, $window, $mdToast, $mdDialog, jwtHelper, localStorageService, userService) {

  $scope.user = userService.user;

  $scope.view = {};
  $scope.page = "send";
  $scope.hide = function() {
    $mdDialog.hide();
  };


  $scope.sendCode = function(form) {
    if(form.$valid) {
      userService.sendCode($scope.user).success(function(data) {
        // $state.go("home");
        // $scope.page = "confirm";
        $mdToast.show(
          $mdToast.simple()
          .content(data.message)
          .position("top right")
          .hideDelay(3000)
          );

          userService.setToken(data.token);

          $mdDialog.hide();


      }).error(function(error) {
        $scope.status = 'Error occure : ';

        if(typeof error.message !== "undefined") {
          $scope.status = $scope.status + error.message;
        }

        $mdToast.show(
          $mdToast.simple()
          .content($scope.status)
          .position("top right")
          .hideDelay(3000)
          );

      });
  }

  };

  $scope.show = function(page) {
    return page == $scope.page;
  }

  $scope.verify = function(form) {
    if(form.$valid) {
      $scope.user.mobile = userService.user.mobile;
    userService.verify($scope.user).success(function(data) {
        userService.setToken(data.token);
      $mdToast.show(
        $mdToast.simple()
        .content(data.message)
        .position("top right")
        .hideDelay(3000)
        );


        $mdDialog.hide();

                    $scope.user = userService.user;
                    console.log($scope.user);

        $scope.user.verified = userService.user.verified;

    }).error(function(error) {
      $scope.status = 'Error occured : ';
      if(typeof error.message !== "undefined") {
        $scope.status = $scope.status + error.message;
      }

      $mdToast.show(
        $mdToast.simple()
        .content($scope.status)
        .position("top right")
        .hideDelay(3000)
        );
    });
    $scope.page = "confirm";
  };
}

}

angular.module('Pardna').factory('authInterceptorService', function ($rootScope, $q, $window, $state) {
  return {
    request: function (config) {
      config.headers = config.headers || {};
      if ($window.sessionStorage.token) {
        config.headers.Authorization = 'Bearer ' + $window.sessionStorage.token;
      }
      return config;
    },
    response: function (response) {
      if (response.status === 401) {
        $state.go("login");
        // handle the case where the user is not authenticated
      }

      return response || $q.when(response);
    }
  };
});

angular.module('Pardna').config(function ($httpProvider) {
  // $httpProvider.interceptors.push('authInterceptorService');
});

angular.module('Pardna')
.controller('GroupAddCtrl', ['$scope', '$window', '$mdToast', '$mdDialog', 'jwtHelper', 'localStorageService', 'userService', GroupAddCtrl]);

function GroupAddCtrl($scope, $window, $mdToast, $mdDialog, jwtHelper, localStorageService, userService) {

  $scope.user = userService.user;


  // Add new pardna
  $scope.data = {
    selectedIndex: 0,
    secondLocked:  true,
    secondLabel:   "Item Two",
    bottom:        false
  };
  $scope.next = function() {
    $scope.data.selectedIndex = Math.min($scope.data.selectedIndex + 1, 2) ;
  };
  $scope.previous = function() {
    $scope.data.selectedIndex = Math.max($scope.data.selectedIndex - 1, 0);
  };

  $scope.color = {
    red: Math.floor(Math.random() * 255),
    green: Math.floor(Math.random() * 255),
    blue: Math.floor(Math.random() * 255)
  };
  $scope.rating1 = 3;
  $scope.rating2 = 2;
  $scope.rating3 = 4;
  $scope.disabled1 = 0;
  $scope.disabled2 = 70;


  $scope.view = {};
  $scope.view.tabs = [
    {
      "icon_class": "fa fa-user",
      "label": "Your Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-gbp",
      "label": "Pardna Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-lock",
      "label": "Direct Debit",
      "template": ""
    },
    {
      "icon_class": "fa fa-users",
      "label": "Invite Friends",
      "template": ""
    },
  ]

}

angular.module('Pardna')
.controller('GroupCtrl', ['$scope', '$window', '$mdToast', '$mdDialog', 'jwtHelper', 'localStorageService', 'userService', GroupCtrl]);

function GroupCtrl($scope, $window, $mdToast, $mdDialog, jwtHelper, localStorageService, userService) {

  $scope.user = userService.user;



  // Add new pardna
  $scope.data = {
    selectedIndex: 0,
    secondLocked:  true,
    secondLabel:   "Item Two",
    bottom:        false
  };
  $scope.next = function() {
    $scope.data.selectedIndex = Math.min($scope.data.selectedIndex + 1, 2) ;
  };
  $scope.previous = function() {
    $scope.data.selectedIndex = Math.max($scope.data.selectedIndex - 1, 0);
  };

  $scope.color = {
    red: Math.floor(Math.random() * 255),
    green: Math.floor(Math.random() * 255),
    blue: Math.floor(Math.random() * 255)
  };
  $scope.rating1 = 3;
  $scope.rating2 = 2;
  $scope.rating3 = 4;
  $scope.disabled1 = 0;
  $scope.disabled2 = 70;


  $scope.view = {};
  $scope.view.tabs = [
    {
      "icon_class": "fa fa-user",
      "label": "Your Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-gbp",
      "label": "Pardna Details",
      "template": ""
    },
    {
      "icon_class": "fa fa-lock",
      "label": "Direct Debit",
      "template": ""
    },
    {
      "icon_class": "fa fa-users",
      "label": "Invite Friends",
      "template": ""
    },
  ]

}

angular.module('Pardna')
    .controller('ForgotPasswordCtrl', ['$scope', ForgotPasswordCtrl]);


function ForgotPasswordCtrl($scope) {

}

angular.module('Pardna')
.controller('LoginCtrl', ['$scope', '$window', '$state', '$mdToast', 'userService', 'localStorageService', 'jwtHelper', LoginCtrl]);


function LoginCtrl($scope, $window, $state, $mdToast, userService, localStorageService, jwtHelper) {
  $scope.data = {};
  $scope.data.user = {};
  
  $scope.login = function() {
    userService.login($scope.data.user).success(function(data) {
      // console.log(data);
      userService.setToken(data.token);
      // localStorageService.set("id_token", data.token);
      // var tokenPayload = jwtHelper.decodeToken(data.token);
      // console.log(tokenPayload);
      $state.go("home", {});


    }).error(function(error) {
      // console.log(error);
      userService.deleteToken();
      $mdToast.show(
            $mdToast.simple()
              .content('Login failed!')
              .position("top right")
              .hideDelay(3000)
          );
      $scope.status = 'Unable to load customer data: ' + error.message;
    });
  }

}

angular.module('Pardna')
.controller('LogoutCtrl', ['$scope', '$window', '$state', '$mdToast', 'userService', 'localStorageService', 'jwtHelper', LogoutCtrl]);


function LogoutCtrl($scope, $window, $state, $mdToast, userService, localStorageService, jwtHelper) {
  userService.deleteToken();
  // e.preventDefault();
  $state.go('login');
}

angular.module('Pardna')
    .controller('SignupCtrl', ['$scope', '$window', '$state', 'userService', SignupCtrl]);

function SignupCtrl($scope, $window, $state, userService) {
  $scope.data = {};
  $scope.data.user = {};
  $scope.signup = function() {
    console.log($scope.data);
    userService.signup($scope.data).success(function(data) {
      userService.setToken(data.token);
      $state.go("home", {});

    }).error(function(error) {
      userService.deleteToken();
      $scope.status = 'Unable to load customer data: ' + error.message;
    });
  }
}

angular.module('Pardna')
    .controller('UserCtrl', ['$scope', UserCtrl]);


function UserCtrl($scope) {
  $scope.user = {
    title: 'Developer',
    email: 'ipsum@lorem.com',
    firstName: '',
    lastName: '' ,
    company: 'Google' ,
    address: '1600 Amphitheatre Pkwy' ,
    city: 'Mountain View' ,
    state: 'CA' ,
    biography: 'Loves kittens, snowboarding, and can type at 130 WPM.\n\nAnd rumor has it she bouldered up Castle Craig!',
    postalCode : '94043'
  };
}


/**
angular
  .module('Pardna')
  .controller('UserCtrl', function($scope) {
    $scope.user = {
      title: 'Developer',
      email: 'ipsum@lorem.com',
      firstName: '',
      lastName: '' ,
      company: 'Google' ,
      address: '1600 Amphitheatre Pkwy' ,
      city: 'Mountain View' ,
      state: 'CA' ,
      biography: 'Loves kittens, snowboarding, and can type at 130 WPM.\n\nAnd rumor has it she bouldered up Castle Craig!',
      postalCode : '94043'
    };
  })
  .config( function($mdThemingProvider){
    // Configure a dark theme with primary foreground yellow
    $mdThemingProvider.theme('docs-dark', 'default')
        .primaryPalette('yellow')
        .dark();
  });
**/

angular.module('Pardna')
    .factory('userService', ['$http', 'env', 'localStorageService', 'jwtHelper', UserService]);

function UserService($http, env, localStorageService, jwtHelper) {
  var urlBase = env.apiUrl;
          var dataFactory = {};
          dataFactory.user = {};
          dataFactory.token = localStorageService.get("id_token");

          dataFactory.signup = function(params) {
              return $http.post(urlBase + '/signup', params);
          };

          dataFactory.setToken = function(token) {
            if(token) {
              dataFactory.user = jwtHelper.decodeToken(token);
              localStorageService.set("id_token", token);
              dataFactory.token = token;
            }
          }

          dataFactory.getToken = function() {
            return dataFactory.token;
          }

          dataFactory.deleteToken = function() {
            dataFactory.token = null;
            localStorageService.remove("id_token");
          }

          dataFactory.login = function(params) {
              return $http.post(urlBase + '/login', params);
          };

          dataFactory.sendCode = function(params) {
              return $http.post(urlBase + '/user/send-code', params);
          };

          dataFactory.verify = function(params) {
              return $http.post(urlBase + '/user/verify', params);
          };

          dataFactory.notifications = function(params) {
              return $http.get(urlBase + '/user/notifications');
          };

          dataFactory.setToken(dataFactory.token);

          return dataFactory;

}
